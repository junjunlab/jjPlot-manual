[["index.html", "The documentation of jjPlot package Chapter 1 About Lao Junjun", " The documentation of jjPlot package Junjun Lao 2022-08-26 Chapter 1 About Lao Junjun If you are interested in my works, welcome to browse my github: https://github.com/junjunlab. "],["intro.html", "Chapter 2 Introduction 2.1 Installation 2.2 Example", " Chapter 2 Introduction This jjPlot package may includes some funny geom/stat layer function to produce enjoyable graphs which is mainly based on ggplot2. Besides it will record my learning experience about ggplot2 package. I will also add more useful functions to this package in the future. 2.1 Installation You can install the development version of jjPlot like so: # install.packages(&quot;devtools&quot;) devtools::install_github(&quot;junjunlab/jjPlot&quot;) 2.2 Example An eaxmple shows here: "],["geom_jjboxplot.html", "Chapter 3 geom_jjboxplot 3.1 basic plot 3.2 split boxplot 3.3 mached legend 3.4 mapping with type", " Chapter 3 geom_jjboxplot I re-write the geom_boxplot based on my knowledge and I also add more parameters to control the graphs to be plot. The following shows the details. 3.1 basic plot load test data first: library(ggplot2) library(jjPlot) # load test data data(&quot;ToothGrowth&quot;) colnames(ToothGrowth) # [1] &quot;len&quot; &quot;supp&quot; &quot;dose&quot; we can show the difference between the geom_jjboxplot and geom_boxplot: pm &lt;- ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjboxplot(aes(fill = factor(dose))) pn &lt;- ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_boxplot(aes(fill = factor(dose))) cowplot::plot_grid(pm,pn,align = &#39;hv&#39;) as you can see, I add a small segment on 1.5IQR line and in the legend. you can also control the outlier points: ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjboxplot(aes(fill = factor(dose)), outlier.color = &#39;black&#39;, outlier.size = 5) here I supply a parameter(outlier.show) to remove the outlier points: ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjboxplot(aes(fill = factor(dose)), outlier.show = F) we can use position_dodge to ajust group space: ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjboxplot(aes(fill = supp), width = 0.8, position = position_dodge(width = 1)) here shows the multiple groups difference: p3 &lt;- ggplot(ToothGrowth,aes(x = supp,y = len)) + geom_jjboxplot(aes(fill = factor(dose)), width = 0.6, position = position_dodge(width = 0.75)) p3n &lt;- ggplot(ToothGrowth,aes(x = supp,y = len, fill = factor(dose))) + geom_boxplot() cowplot::plot_grid(p3,p3n,align = &#39;hv&#39;) 3.2 split boxplot I supply four types to show the boxplot including full, split, left and right which can make boxplot more flexible for you. full type(default mode): ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjboxplot(aes(fill = factor(dose)), type = &#39;full&#39;) left type: ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjboxplot(aes(fill = factor(dose)), type = &#39;left&#39;) we can use shift to ajust the position: ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjboxplot(aes(fill = factor(dose)), type = &#39;left&#39;, shift = -0.05) right type: ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjboxplot(aes(fill = factor(dose)), type = &#39;right&#39;) we can use shift to ajust the position: ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjboxplot(aes(fill = factor(dose)), type = &#39;right&#39;, shift = 0.05) split type: ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjboxplot(aes(fill = factor(dose)), type = &#39;split&#39;) in fact every boxplot includes two parts, you can also use shift to split them: ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjboxplot(aes(fill = factor(dose)), type = &#39;split&#39;, split.shift = 0.025) you can combine with other geom layer: ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjboxplot(aes(fill = factor(dose)), type = &#39;split&#39;, split.shift = 0.08) + geom_violin(width = 0.15) 3.3 mached legend you can add mached legend to split boxplot: ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjboxplot(aes(fill = factor(dose)), type = &#39;left&#39;, key_glyph = draw_key_boxLeft) right: ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjboxplot(aes(fill = factor(dose)), type = &#39;right&#39;, key_glyph = draw_key_boxRight) split: ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjboxplot(aes(fill = factor(dose)), type = &#39;split&#39;, split.shift = 0.025, key_glyph = draw_key_boxSplit) 3.4 mapping with type you can also define the type args as a mapping variable to draw different directions graphs especially for two sub-groups within group. here we add a two types column into dataset: # add type ToothGrowth$type &lt;- ifelse(ToothGrowth$supp == &quot;OJ&quot;,&quot;left&quot;,&quot;right&quot;) mapping with type: ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjboxplot(aes(fill = supp,type = type), width = 0.7) ajust group space: ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjboxplot(aes(fill = supp,type = type), width = 0.7, position = position_dodge(width = 0.2)) "],["geom_jjviolin.html", "Chapter 4 geom_jjviolin 4.1 basic plot 4.2 split violin 4.3 multiple groups 4.4 mached legend 4.5 mapping with type", " Chapter 4 geom_jjviolin I also re-write the geom_violin based on my knowledge and I also add more parameters to control the graphs to be plot. The following shows the details. 4.1 basic plot we can show the difference between the geom_jjviolin and geom_violin: p1 &lt;- ggplot(mtcars,aes(x = factor(cyl),y = mpg)) + geom_violin() p2 &lt;- ggplot(mtcars,aes(x = factor(cyl),y = mpg)) + geom_jjviolin(width = 0.5) cowplot::plot_grid(p1,p2,align = &#39;hv&#39;) it seems that my violins are fatter than geom_violinâ€™S? we can also retain head and tail: pt1 &lt;- ggplot(mtcars,aes(x = factor(cyl),y = mpg)) + geom_violin(trim = F) pt2 &lt;- ggplot(mtcars,aes(x = factor(cyl),y = mpg)) + geom_jjviolin(width = 0.5, trim = F) cowplot::plot_grid(pt1,pt2,align = &#39;hv&#39;) you can change the width: ggplot(mtcars,aes(x = factor(cyl),y = mpg)) + geom_jjviolin(aes(fill = factor(cyl)), width = 0.2) 4.2 split violin I supply four types to show the boxplot including full, split, left and right which can make violin plot more flexible for you. full type(default mode): ggplot(mtcars,aes(x = factor(cyl),y = mpg)) + geom_jjviolin(aes(fill = factor(cyl)), width = 0.5, trim = F, type = &#39;full&#39;) left type: ggplot(mtcars,aes(x = factor(cyl),y = mpg)) + geom_jjviolin(aes(fill = factor(cyl)), width = 0.5, trim = F, type = &#39;left&#39;) we can use shift to ajust the position: ggplot(mtcars,aes(x = factor(cyl),y = mpg)) + geom_jjviolin(aes(fill = factor(cyl)), width = 0.5, trim = F, type = &#39;left&#39;, shift = 0.05) right type: ggplot(mtcars,aes(x = factor(cyl),y = mpg)) + geom_jjviolin(aes(fill = factor(cyl)), width = 0.5, trim = F, type = &#39;right&#39;) we can use shift to ajust the position: ggplot(mtcars,aes(x = factor(cyl),y = mpg)) + geom_jjviolin(aes(fill = factor(cyl)), width = 0.5, trim = F, type = &#39;right&#39;, shift = 0.05) split type: ggplot(mtcars,aes(x = factor(cyl),y = mpg)) + geom_jjviolin(aes(fill = factor(cyl)), width = 0.5, trim = F, type = &#39;split&#39;) use split to split them: ggplot(mtcars,aes(x = factor(cyl),y = mpg)) + geom_jjviolin(aes(fill = factor(cyl)), width = 0.5, trim = F, type = &#39;split&#39;, shift = 0.025) combine with other geom layer: ggplot(mtcars,aes(x = factor(cyl),y = mpg)) + geom_jjviolin(aes(fill = factor(cyl)), width = 0.5, trim = F, type = &#39;split&#39;, shift = 0.025) + geom_boxplot(aes(fill = factor(cyl)), width = 0.1,alpha = 0.5) 4.3 multiple groups here we show geom_jjviolin works with multiple groups: ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjviolin(aes(fill = supp), width = 0.25, trim = F, position = position_dodge(width = 1)) draw left: ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjviolin(aes(fill = supp), width = 0.25, trim = F, position = position_dodge(width = 1), type = &quot;left&quot;) draw right: ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjviolin(aes(fill = supp), width = 0.25, trim = F, position = position_dodge(width = 1), type = &quot;right&quot;) draw split: ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjviolin(aes(fill = supp), width = 0.15, trim = F, position = position_dodge(width = 1), type = &quot;split&quot;, shift = 0.03) combine with other geom layer: ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjviolin(aes(fill = supp), width = 0.15, trim = F, position = position_dodge(width = 1), type = &quot;split&quot;, shift = 0.03, key_glyph = draw_key_violinSplit) + geom_boxplot(aes(fill = supp), width = 0.2, alpha = 0.5, position = position_dodge(width = 1)) 4.4 mached legend you can add mached legend to split violin plot: ggplot(mtcars,aes(x = factor(cyl),y = mpg)) + geom_jjviolin(aes(fill = factor(cyl)), width = 0.5, trim = F, type = &#39;left&#39;, key_glyph = draw_key_violinLeft) right legend: ggplot(mtcars,aes(x = factor(cyl),y = mpg)) + geom_jjviolin(aes(fill = factor(cyl)), width = 0.5, trim = F, type = &#39;right&#39;, key_glyph = draw_key_violinRight) split legend: ggplot(mtcars,aes(x = factor(cyl),y = mpg)) + geom_jjviolin(aes(fill = factor(cyl)), width = 0.5, trim = F, type = &#39;split&#39;, shift = 0.025, key_glyph = draw_key_violinSplit) 4.5 mapping with type you can also define the type args as a mapping variable to draw different directions graphs especially for two sub-groups within group. mapping with type: # add type ToothGrowth$type &lt;- ifelse(ToothGrowth$supp == &quot;OJ&quot;,&quot;left&quot;,&quot;right&quot;) ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjviolin(aes(fill = supp, type = type), width = 0.15, trim = F) ajust group space: ggplot(ToothGrowth,aes(x = factor(dose),y = len)) + geom_jjviolin(aes(fill = supp, type = type), width = 0.15, trim = F, position = position_dodge(width = 0.1)) "],["geom_jjpie.html", "Chapter 5 geom_jjpie 5.1 basic usage 5.2 asymmetric matrix 5.3 example 5.4 limitations", " Chapter 5 geom_jjpie geom_jjpie can be used to visualize a single value on pie chart graph and shows how the ratio of value to the max. the following we will illustrate how the geom_jjpie works. 5.1 basic usage we first prepare a correlation matrix data: library(ggplot2) library(jjPlot) library(reshape2) # test cor_data &lt;- cor(mtcars) %&gt;% data.frame() %&gt;% mutate(x = rownames(.)) %&gt;% melt(.,id.vars = &quot;x&quot;) the geom_jjpie need three mapping variables at least: x, y, piefill: ggplot(cor_data, aes(x = x,y = variable)) + geom_jjpie(aes(piefill = value)) + coord_fixed() we can give a specified pie.theta: ggplot(cor_data, aes(x = x,y = variable)) + geom_jjpie(aes(piefill = value), pie.theta = 120) + coord_fixed() using correlation value as filled color: ggplot(cor_data, aes(x = x,y = variable,fill = value)) + geom_jjpie(aes(piefill = value), pie.theta = 120) + coord_fixed() you can also change the pie degree and add rect background: ggplot(cor_data, aes(x = x,y = variable,fill = value)) + geom_jjpie(aes(piefill = value), pie.theta = 270, add.rect = T) + coord_fixed() remove circle background: ggplot(cor_data, aes(x = x,y = variable,fill = value)) + geom_jjpie(aes(piefill = value), pie.theta = 90, add.rect = T, add.circle = F) + coord_fixed() if you do not define your pie.theta, the pie degree will be calculated automatically acorrding to the piefill: library(RColorBrewer) ggplot(cor_data, aes(x = x,y = variable,fill = value)) + geom_jjpie(aes(piefill = value)) + scale_fill_gradientn(colours = brewer.pal(11, &quot;RdYlBu&quot;)) + coord_fixed() you can change the circle background fill color: ggplot(cor_data, aes(x = x,y = variable,fill = value)) + geom_jjpie(aes(piefill = value), circle.fill = &#39;#009933&#39;) + scale_fill_gradientn(colours = brewer.pal(11, &quot;RdYlBu&quot;)) + coord_fixed() add a second circle to make a hollow pie: ggplot(cor_data, aes(x = x,y = variable,fill = value)) + geom_jjpie(aes(piefill = value), circle.fill = &#39;#009933&#39;, circle.radius = 1) + scale_fill_gradientn(colours = brewer.pal(11, &quot;RdYlBu&quot;)) + coord_fixed() change the second circle fill color: ggplot(cor_data, aes(x = x,y = variable,fill = value)) + geom_jjpie(aes(piefill = value), circle.fill = &#39;#009933&#39;, circle.radius = 1, hollow.fill = &#39;grey90&#39;) + scale_fill_gradientn(colours = brewer.pal(11, &quot;RdYlBu&quot;)) + coord_fixed() 5.2 asymmetric matrix geom_jjpie also can be used to asymmetric matrix. cor_data1 &lt;- cor_data %&gt;% filter(variable %in% c(&#39;mpg&#39;,&#39;cyl&#39;,&#39;disp&#39;,&#39;hp&#39;)) ggplot(cor_data1, aes(x = x,y = variable,fill = value)) + geom_jjpie(aes(piefill = value), width = 1.3) + coord_fixed() add rect: ggplot(cor_data1, aes(x = x,y = variable,fill = value)) + geom_jjpie(aes(piefill = value), width = 1, add.rect = T) + coord_fixed() cor_data2 &lt;- cor_data %&gt;% filter(x %in% c(&#39;mpg&#39;,&#39;cyl&#39;,&#39;disp&#39;)) ggplot(cor_data2, aes(x = x,y = variable,fill = value)) + geom_jjpie(aes(piefill = value), width = 0.7) + coord_fixed() 5.3 example here we show an example: # load data dot_data &lt;- read.delim(&#39;gene-dot.txt&#39;,header = T) %&gt;% arrange(class) # check head(dot_data,3) # cell gene class mean.expression percentage # 1 1b CoelEpi GATA4 DMRT1 Early supporting 0.3749122 36.03614 # 2 1b CoelEpi GATA4 CPA2 Early supporting 0.7495705 95.82235 # 3 1b CoelEpi GATA4 GPR37 Early supporting 0.1604790 95.79420 # colnames colnames(dot_data) # [1] &quot;cell&quot; &quot;gene&quot; &quot;class&quot; &quot;mean.expression&quot; &quot;percentage&quot; unique(dot_data$cell) # [1] &quot;1b CoelEpi GATA4&quot; &quot;2a Early somatic&quot; &quot;2b ESGC male&quot; &quot;2b ESGC female&quot; # [5] &quot;2c PreGC-I&quot; &quot;2d Sertoil&quot; &quot;3a Early sPAX8&quot; &quot;3b Gi&quot; # add cell group dot_data$cellGroup &lt;- case_when( dot_data$cell %in% c(&quot;1b CoelEpi GATA4&quot;, &quot;2a Early somatic&quot;, &quot;2b ESGC male&quot;) ~ &quot;cell type1&quot;, dot_data$cell %in% c(&quot;2b ESGC female&quot;, &quot;2c PreGC-I&quot;, &quot;2d Sertoil&quot;) ~ &quot;cell type2&quot;, dot_data$cell %in% c(&quot;3a Early sPAX8&quot;, &quot;3b Gi&quot;) ~ &quot;cell type3&quot; ) # order dot_data$gene &lt;- factor(dot_data$gene,levels = unique(dot_data$gene)) pie plot: # plot ggplot(dot_data,aes(x = gene,y = cell,fill = mean.expression)) + geom_jjpie(aes(piefill = mean.expression),width = 1.3) + scale_fill_gradient2(low = &#39;white&#39;,mid = &#39;#EB1D36&#39;,high = &#39;#990000&#39;, midpoint = 0.5, name = &#39;Mean expression&#39;) + theme_bw(base_size = 16) + xlab(&#39;&#39;) + ylab(&#39;&#39;) + theme(axis.text.x = element_text(angle = 45,hjust = 1)) + coord_fixed() hollow pie: ggplot(dot_data,aes(x = gene,y = cell,fill = mean.expression)) + geom_jjpie(aes(piefill = mean.expression),width = 1.3, circle.radius = 1) + scale_fill_gradient2(low = &#39;white&#39;,mid = &#39;#EB1D36&#39;,high = &#39;#990000&#39;, midpoint = 0.5, name = &#39;Mean expression&#39;) + theme_bw(base_size = 16) + xlab(&#39;&#39;) + ylab(&#39;&#39;) + theme(axis.text.x = element_text(angle = 45,hjust = 1)) + coord_fixed() add rect: ggplot(dot_data,aes(x = gene,y = cell,fill = mean.expression)) + geom_jjpie(aes(piefill = mean.expression), width = 1.3, circle.radius = 1, add.rect = T, rect.height = 1.5, rect.width = 1.5) + scale_fill_gradient2(low = &#39;white&#39;,mid = &#39;#EB1D36&#39;,high = &#39;#990000&#39;, midpoint = 0.5, name = &#39;Mean expression&#39;) + theme_bw(base_size = 16) + xlab(&#39;&#39;) + ylab(&#39;&#39;) + theme(axis.text.x = element_text(angle = 45,hjust = 1)) + coord_fixed() 5.4 limitations I am not sure the exact relation between y axis range and x axis range and sometimes the pie produced from asymmetric matrix data will be strange. Here you can ajust the shift parameter to make the pie look much circular. cor_datax &lt;- cor_data %&gt;% filter(x %in% c(&#39;mpg&#39;,&#39;cyl&#39;,&#39;disp&#39;,&#39;hp&#39;,&quot;drat&quot;, &quot;wt&quot;)) %&gt;% filter(variable %in% c(&#39;mpg&#39;,&#39;cyl&#39;,&#39;disp&#39;)) ggplot(cor_datax, aes(x = x,y = variable,fill = value)) + geom_jjpie(aes(piefill = value)) + coord_fixed() ajust: ggplot(cor_datax, aes(x = x,y = variable,fill = value)) + geom_jjpie(aes(piefill = value), shift = 0.9) + coord_fixed() "],["geom_jjpie2.html", "Chapter 6 geom_jjpie2 6.1 prepare data 6.2 examples", " Chapter 6 geom_jjpie2 geom_jjpie2 almost is same as geom_jjpie . The geom_jjpie2 can totate the pie graph and produce a right circle. the following we will illustrate how the geom_jjpie2 works. 6.1 prepare data # test cor_data &lt;- cor(mtcars) %&gt;% data.frame() %&gt;% mutate(x = rownames(.)) %&gt;% melt(.,id.vars = &quot;x&quot;) cor_datax &lt;- cor_data %&gt;% filter(variable %in% c(&#39;mpg&#39;,&#39;cyl&#39;,&#39;disp&#39;,&#39;hp&#39;)) # add some value cor_datax$value2 &lt;- rev(cor_datax$value) 6.2 examples rotate with angle arg: library(ggnewscale) ggplot(cor_datax, aes(x = x,y = variable)) + geom_jjpie2(aes(piefill = value,fill = value), pie.theta = 180, angle = 90, add.circle = F, width = 2) + scale_fill_gradient(low = &#39;grey80&#39;,high = &#39;red&#39;) + new_scale_fill() + geom_jjpie2(aes(piefill = value2,fill = value2), pie.theta = 180, angle = 270, add.circle = F, width = 2) + scale_fill_gradient(low = &#39;grey80&#39;,high = &#39;blue&#39;) + coord_fixed() rotate to vertical position: ggplot(cor_datax, aes(x = x,y = variable)) + geom_jjpie2(aes(piefill = value,fill = value), pie.theta = 180, angle = 180, add.circle = F, width = 2) + scale_fill_gradient(low = &#39;grey80&#39;,high = &#39;red&#39;) + new_scale_fill() + geom_jjpie2(aes(piefill = value2,fill = value2), pie.theta = 180, angle = 360, add.circle = F, width = 2) + scale_fill_gradient(low = &#39;grey80&#39;,high = &#39;blue&#39;) + coord_fixed() make hollow circle: ggplot(cor_datax, aes(x = x,y = variable)) + geom_jjpie2(aes(piefill = value,fill = value), pie.theta = 180, angle = 90, add.circle = F, width = 2) + scale_fill_gradient(low = &#39;grey80&#39;,high = &#39;red&#39;) + new_scale_fill() + geom_jjpie2(aes(piefill = value2,fill = value2), pie.theta = 180, angle = 270, add.circle = F, circle.radius = 2, hollow.fill = &#39;white&#39;, width = 2) + scale_fill_gradient(low = &#39;grey80&#39;,high = &#39;blue&#39;) + coord_fixed() + theme_bw() "],["geom_jjtriangle.html", "Chapter 7 geom_jjtriangle 7.1 right triangle 7.2 isosceles triangle 7.3 rect graph 7.4 examples", " Chapter 7 geom_jjtriangle geom_jjtriangle helps you to visualize multiple variables in multiple triangle graph parts. first we prepare test data: library(ggplot2) library(jjPlot) library(reshape2) library(ggnewscale) # test cor_data &lt;- cor(mtcars) %&gt;% data.frame() %&gt;% mutate(x = rownames(.)) %&gt;% melt(.,id.vars = &quot;x&quot;) cor_data &lt;- cor_data %&gt;% filter(variable %in% c(&#39;mpg&#39;,&#39;cyl&#39;,&#39;disp&#39;,&#39;hp&#39;)) # add some value cor_data$value2 &lt;- rev(cor_data$value) cor_data$value3 &lt;- runif(44,min = -1,max = 1) cor_data$value4 &lt;- runif(44,min = -1,max = 1) 7.1 right triangle there are four types or right triangle can be ploted with giving a specified type: # basic plot pb &lt;- ggplot(cor_data, aes(x = x,y = variable,fill = value)) + coord_fixed() # right triangle pul &lt;- pb + geom_jjtriangle(type = &#39;ul&#39;) pbl &lt;- pb + geom_jjtriangle(type = &#39;bl&#39;) pur &lt;- pb + geom_jjtriangle(type = &#39;ur&#39;) pbr &lt;- pb + geom_jjtriangle(type = &#39;br&#39;) # combine cowplot::plot_grid(plotlist = list(pul,pbl,pur,pbr), nrow = 2,align = &#39;hv&#39;) 7.2 isosceles triangle there are also four types or isosceles triangle can be ploted with giving a specified type: # isosceles triangle pmu &lt;- pb + geom_jjtriangle(type = &#39;mu&#39;) pmb &lt;- pb + geom_jjtriangle(type = &#39;mb&#39;) pml &lt;- pb + geom_jjtriangle(type = &#39;ml&#39;) pmr &lt;- pb + geom_jjtriangle(type = &#39;mr&#39;) # combine cowplot::plot_grid(plotlist = list(pmu,pmb,pml,pmr), nrow = 2,align = &#39;hv&#39;) centri type, you can put the triangle in the middle: # centri triangle pb + geom_jjtriangle(type = &#39;centri&#39;,width = 0.6) + scale_fill_gradient(low = &#39;grey80&#39;,high = &#39;#009933&#39;) 7.3 rect graph there are two types of rect: # rect pup &lt;- pb + geom_jjtriangle(rect = T,type = &#39;upper&#39;) pbt &lt;- pb + geom_jjtriangle(rect = T,type = &#39;bottom&#39;) # combine cowplot::plot_grid(plotlist = list(pup,pbt), nrow = 2,align = &#39;hv&#39;) 7.4 examples here we show some examples. exmaple 1: # exmaple 1 ggplot(cor_data, aes(x = x,y = variable)) + geom_jjtriangle(aes(fill = value),type = &#39;ul&#39;) + scale_fill_gradient(low = &#39;#FFCC33&#39;,high = &#39;#99CC33&#39;) + # new legend new_scale_fill() + geom_jjtriangle(aes(fill = value2),type = &#39;br&#39;) + scale_fill_gradient(low = &#39;#66CCCC&#39;,high = &#39;#FF3399&#39;) + coord_fixed() exmaple 2: # exmaple 2 ggplot(cor_data, aes(x = x,y = variable)) + geom_jjtriangle(aes(fill = value),type = &#39;mu&#39;) + scale_fill_gradient(low = &#39;#FFCC33&#39;,high = &#39;#99CC33&#39;) + # new legend new_scale_fill() + geom_jjtriangle(aes(fill = value2),type = &#39;mb&#39;) + scale_fill_gradient(low = &#39;#66CCCC&#39;,high = &#39;#FF3399&#39;) + # new legend new_scale_fill() + geom_jjtriangle(aes(fill = value3),type = &#39;ml&#39;) + scale_fill_gradient(low = &#39;#FF9966&#39;,high = &#39;#FF6666&#39;) + # new legend new_scale_fill() + geom_jjtriangle(aes(fill = value4),type = &#39;mr&#39;) + scale_fill_gradient(low = &#39;#0099CC&#39;,high = &#39;#666666&#39;) + theme(legend.position = &#39;top&#39;) + coord_fixed() change width: # change width ggplot(cor_data, aes(x = x,y = variable)) + geom_jjtriangle(aes(fill = value),type = &#39;mu&#39;) + scale_fill_gradient(low = &#39;#FFCC33&#39;,high = &#39;#99CC33&#39;) + # new legend new_scale_fill() + geom_jjtriangle(aes(fill = value2),type = &#39;mb&#39;) + scale_fill_gradient(low = &#39;#66CCCC&#39;,high = &#39;#FF3399&#39;) + # new legend new_scale_fill() + geom_jjtriangle(aes(fill = value3),type = &#39;ml&#39;,width = 0.5) + scale_fill_gradient(low = &#39;#FF9966&#39;,high = &#39;#FF6666&#39;) + # new legend new_scale_fill() + geom_jjtriangle(aes(fill = value4),type = &#39;mr&#39;,width = 0.5) + scale_fill_gradient(low = &#39;#0099CC&#39;,high = &#39;#666666&#39;) + theme(legend.position = &#39;top&#39;) + coord_fixed() exmaple 3: # exmaple 3 ggplot(cor_data, aes(x = x,y = variable)) + geom_jjtriangle(aes(fill = value), rect = T, width = 0.8, type = &#39;upper&#39;) + scale_fill_gradient(low = &#39;#FFCC33&#39;,high = &#39;#99CC33&#39;) + # new legend new_scale_fill() + geom_jjtriangle(aes(fill = value2), rect = T, width = 0.8, type = &#39;bottom&#39;) + scale_fill_gradient(low = &#39;#66CCCC&#39;,high = &#39;#FF3399&#39;) + coord_fixed() "],["geom_jjviomap.html", "Chapter 8 geom_jjviomap 8.1 load test data 8.2 examples 8.3 end", " Chapter 8 geom_jjviomap Here supply a geom_jjviomap function to visualize gene expression or other data in a heatmap-like way. The geom_jjviomap can still retain data distribution informations through violin graphs. 8.1 load test data Process data first: # load test data data(exp.long) # check head(exp.long,3) # id gene exp # 1 2 LDHB 3.075915 # 2 3 LDHB 2.583047 # 3 2 LDHB 3.387729 # add median expression to group per gene map_df(unique(exp.long$id),function(x){ tmp &lt;- exp.long %&gt;% filter(id == x) map_df(unique(tmp$gene),function(j){ tmp1 &lt;- tmp %&gt;% filter(gene == j) # calculate median expressions tmp1$median_exp &lt;- median(tmp1$exp) return(tmp1) }) -&gt; res return(res) }) -&gt; test # make factor test$id &lt;- factor(test$id) 8.2 examples First we show the facet violin plots: # facet plot ggplot(test,aes(x = id,y = exp)) + geom_violin(aes(fill = id),trim = T) + facet_wrap(~gene,ncol = 1, strip.position = &#39;right&#39;, scales = &#39;fixed&#39;) + theme_bw(base_size = 12) + theme(strip.text.y = element_text(angle = 0,hjust = 0), panel.grid = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), aspect.ratio = 0.05, strip.background.y = element_rect(fill = NA,color = NA), panel.spacing = unit(0,&#39;cm&#39;)) Viomap default plot: # default ggplot(test,aes(x = gene,y = id)) + geom_jjviomap(aes(val = exp), width = 1) + coord_fixed() Mapping with cluster: # aes cluster ggplot(test,aes(x = gene,y = id)) + geom_jjviomap(aes(val = exp,fill = id), width = 1) + coord_fixed() Mapping with gene: # aes gene ggplot(test,aes(x = gene,y = id)) + geom_jjviomap(aes(val = exp,fill = gene), width = 1) + coord_fixed() The most important point that we need to show the gene expression variance across the different clusters, we can use median expression to fill the violin color: # aes median expressions ggplot(test,aes(x = gene,y = id)) + geom_jjviomap(aes(val = exp,fill = median_exp), width = 1) + scale_fill_gradient(low = &#39;white&#39;,high = &#39;#04009A&#39;) + theme_bw(base_size = 14) + theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 90,hjust = 1,vjust = 0.5)) + coord_fixed() Add rect background: # add rect ggplot(test,aes(x = gene,y = id)) + geom_jjviomap(aes(val = exp,fill = median_exp), width = 1) + scale_fill_gradient(low = &#39;white&#39;,high = &#39;#04009A&#39;) + theme_bw(base_size = 14) + theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 90,hjust = 1,vjust = 0.5)) + coord_fixed() + geom_tile(fill = &#39;transparent&#39;,color = &#39;black&#39;) You can rotate the violins: # rotate the violins ggplot(test,aes(x = gene,y = id)) + geom_jjviomap(aes(val = exp,fill = median_exp), angle = 45, width = 1) + scale_fill_gradient(low = &#39;white&#39;,high = &#39;#04009A&#39;) + theme_bw(base_size = 14) + theme(panel.grid = element_blank(), axis.text.x = element_text(angle = 90,hjust = 1,vjust = 0.5)) + coord_fixed() + geom_tile(fill = &#39;transparent&#39;,color = &#39;black&#39;) 8.3 end More args see: ?geom_jjviomap "],["geom_jjpointpie.html", "Chapter 9 geom_jjPointPie 9.1 Introduction 9.2 Installation 9.3 Prepare data 9.4 Examples 9.5 Annotation 9.6 Add percent ratio 9.7 End", " Chapter 9 geom_jjPointPie 9.1 Introduction To better display the relative ratio of different element in multiple groups, here supply a jjPointPie geom function to draw multiple pies in graph in a convenient way. 9.2 Installation Re-install it to gain new features: install.packages(&#39;devtools&#39;) devtools::install_github(&#39;junjunlab/jjPlot&#39;) 9.3 Prepare data library(ggplot2) library(jjPlot) # prepare test set.seed(123) test &lt;- data.frame(gene = rep(LETTERS[1:5],each = 10), id = rep(as.character(1:10),5), group = 1:50, r = rep(c(0.4,0.8,1.2,1,1.6),each = 10), s1 = abs(rnorm(50,sd = 10)), s2 = abs(rnorm(50,sd = 10)), s3 = abs(rnorm(50,sd = 10))) # check head(test,3) # gene id group r s1 s2 s3 # 1 A 1 1 0.4 5.604756 2.5331851 7.104066 # 2 A 2 2 0.4 2.301775 0.2854676 2.568837 # 3 A 3 3 0.4 15.587083 0.4287046 2.466919 # widte to long df.long &lt;- reshape2::melt(test,id.vars = c(&#39;gene&#39;,&#39;id&#39;,&#39;group&#39;,&#39;r&#39;), variable.name = &#39;type&#39;,value.name = &#39;per&#39;) # check head(df.long,3) # gene id group r type per # 1 A 1 1 0.4 s1 5.604756 # 2 A 2 2 0.4 s1 2.301775 # 3 A 3 3 0.4 s1 15.587083 9.4 Examples Defalut plot, you should define the group, the relative ratio will be calculated automaticlly: # default ggplot(df.long,aes(x = id,y = gene,group = group)) + geom_jjPointPie(aes(pievar = per)) + coord_fixed() Mapping with type: # mapping with type ggplot(df.long,aes(x = id,y = gene,group = group)) + geom_jjPointPie(aes(pievar = per, fill = type)) + coord_fixed() We can add a circle on it: # add circle ggplot(df.long,aes(x = id,y = gene,group = group)) + geom_jjPointPie(aes(pievar = per, fill = type), add.circle = TRUE, circle.radius = 0.07) + coord_fixed() Or make a hollow circle pie: # make hollow circle ggplot(df.long,aes(x = id,y = gene,group = group)) + geom_jjPointPie(aes(pievar = per, fill = type), add.circle = TRUE, circle.rev = TRUE, circle.radius = 0.03, circle.fill = &#39;grey90&#39;) + coord_fixed() You can also specify a group name to be seprated from the pie: # seprate part of pie ggplot(df.long,aes(x = id,y = gene,group = group)) + geom_jjPointPie(aes(pievar = per, fill = type, filltype = type), explode = &quot;s1&quot;) + coord_fixed() # seprate part of pie ggplot(df.long,aes(x = id,y = gene,group = group)) + geom_jjPointPie(aes(pievar = per, fill = type, filltype = type), explode = &quot;s3&quot;) + coord_fixed() Seprate all parts which looks like chapped pie: # seprate all ggplot(df.long,aes(x = id,y = gene,group = group)) + geom_jjPointPie(aes(pievar = per, fill = type, filltype = type, explode = type)) + coord_fixed() Ajust the distance: # ajust dist ggplot(df.long,aes(x = id,y = gene,group = group)) + geom_jjPointPie(aes(pievar = per, fill = type, filltype = type), explode = &quot;s1&quot;, explode.dist = 0.25) + coord_fixed() Change filled color: # change fill color ggplot(df.long,aes(x = id,y = gene,group = group)) + geom_jjPointPie(aes(pievar = per, fill = type, filltype = type), explode = &quot;s1&quot;, explode.dist = 0.25) + coord_fixed() + ggsci::scale_fill_npg() Ajust width and color: # ajust width and color ggplot(df.long,aes(x = id,y = gene,group = group)) + geom_jjPointPie(aes(pievar = per, fill = type), width = 1.5, color = &#39;white&#39;, line.size = 1) + coord_fixed() + theme_bw(base_size = 14) + theme(panel.grid = element_blank()) + ggsci::scale_fill_npg() Add rect background: # add rect background ggplot(df.long,aes(x = id,y = gene,group = group)) + geom_jjPointPie(aes(pievar = per, fill = type), width = 1.5, color = &#39;white&#39;, line.size = 1) + geom_tile(fill = NA,color = &#39;black&#39;) + coord_fixed() + theme_bw(base_size = 14) + theme(panel.grid = element_blank()) + ggsci::scale_fill_npg() Mapping with width: # mapping with width ggplot(df.long,aes(x = id,y = gene,group = group)) + geom_jjPointPie(aes(pievar = per, fill = type, width = r), color = &#39;white&#39;, line.size = 1) + geom_tile(fill = NA,color = &#39;black&#39;) + coord_fixed() + theme_bw(base_size = 14) + theme(panel.grid = element_blank()) + ggsci::scale_fill_npg() Add a legend? # add legend ggplot(df.long,aes(x = id,y = gene,group = group)) + geom_jjPointPie(aes(pievar = per, fill = type, width = r), color = &#39;white&#39;, line.size = 1) + geom_tile(fill = NA,color = &#39;black&#39;) + coord_fixed() + theme_bw(base_size = 14) + theme(panel.grid = element_blank()) + ggsci::scale_fill_npg() + scatterpie::geom_scatterpie_legend(df.long$r/10, x = 1,y = 5.8,n = 3) 9.5 Annotation We can add some annotations using jjAnno: # ======================================================= library(jjAnno) # add groups df.long$id &lt;- factor(df.long$id,levels = 1:10) df.long$group2 &lt;- case_when(df.long$id %in% as.character(1:2) ~ &#39;group 1&#39;, df.long$id %in% as.character(3:4) ~ &#39;group 2&#39;, df.long$id %in% as.character(5:6) ~ &#39;group 3&#39;, df.long$id %in% as.character(7:8) ~ &#39;group 4&#39;, df.long$id %in% as.character(9:10) ~ &#39;group 5&#39;) # basic plot p &lt;- ggplot(df.long,aes(x = id,y = gene,group = group)) + geom_jjPointPie(aes(pievar = per, fill = type), width = 1.5, color = &#39;white&#39;, line.size = 1) + geom_tile(fill = NA,color = &#39;black&#39;) + coord_fixed(clip = &#39;off&#39;) + theme_bw(base_size = 14) + theme(panel.grid = element_blank()) + ggsci::scale_fill_npg() # add anno annoSegment(object = p, annoPos = &#39;top&#39;, aesGroup = T, aesGroName = &#39;group2&#39;, yPosition = 5.8, segWidth = 0.8, alpha = 0.6, addText = T, textSize = 14) 9.6 Add percent ratio Add the percent ratio can exactlly show the real data. We can use add.text = TRUE to mark the ratio: # prepare test set.seed(124) test &lt;- data.frame(gene = rep(LETTERS[1:3],each = 5), id = rep(as.character(1:5),3), group = 1:15, r = rep(c(0.4,0.8,1.2,1,1.6),each = 3), s1 = abs(rnorm(15,sd = 10)), s2 = abs(rnorm(15,sd = 10)), s3 = abs(rnorm(15,sd = 10))) # widte to long df.long &lt;- reshape2::melt(test,id.vars = c(&#39;gene&#39;,&#39;id&#39;,&#39;group&#39;,&#39;r&#39;), variable.name = &#39;type&#39;,value.name = &#39;per&#39;) # add percent ggplot(df.long,aes(x = id,y = gene,group = group)) + geom_jjPointPie(aes(pievar = per, fill = type), width = 2, alpha = 0.6, add.text = T, text.dist = 0.6) + theme_bw(base_size = 14) + theme(panel.grid = element_blank()) + ggsci::scale_fill_d3() + coord_fixed() You can change text size and angle: # change text size and angle ggplot(df.long,aes(x = id,y = gene,group = group)) + geom_jjPointPie(aes(pievar = per, fill = type), width = 2, add.text = T, text.dist = 0.6, text.size = 3.5,text.rot = 45) + theme_bw(base_size = 14) + theme(panel.grid = element_blank()) + ggsci::scale_fill_d3() + coord_fixed() Specify the digits to be retained: # retain percent digit ggplot(df.long,aes(x = id,y = gene,group = group)) + geom_jjPointPie(aes(pievar = per, fill = type), width = 2, add.text = T, text.dist = 0.68, text.size = 3.5,ratio.digit = 0) + theme_bw(base_size = 14) + theme(panel.grid = element_blank()) + ggsci::scale_fill_d3() + coord_fixed() You can also emphasize one part and add ratio label: # seprate part of pie and add percent label ggplot(df.long,aes(x = id,y = gene,group = group)) + geom_jjPointPie(aes(pievar = per, fill = type, filltype = type), width = 2, add.text = T, text.dist = 0.77, text.size = 3.5,ratio.digit = 0, explode = &quot;s1&quot;,text.all = F) + theme_bw(base_size = 14) + theme(panel.grid = element_blank()) + ggsci::scale_fill_d3() + coord_fixed() 9.7 End More args see: ?geom_jjPointPie "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
